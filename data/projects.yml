# Project Summaries (for project cards)
summaries:
  - id: slime-murderer
    title: "SLIME MURDERER"
    flairs:
      - Unity
      - C#
      - FUTUREGAMES
    detailPageUrl: "/project.html?id=slime-murderer"
    imageSrc: "/assets/projects/slime-murderer/slime-murderer-00.gif"
    imageCaption: "SLIME MURDERER gameplay"
    projectType: "C# UNITY COURSE - FUTUREGAMES"
    description: "\"Slime Murderer\" is a <a href=\"https://store.steampowered.com/app/1794680/Vampire_Survivors/\">Vampire Survivors</a> clone I made during my first course at FUTUREGAMES, the C# course."
    links:
      github: ""
      demo: "https://download.noslimes.com/My%20Games/SLIME%20MURDERER/SLIME%20MURDERER.zip"
  
  - id: cat-survival-craft
    title: "Cat Survival Craft [Working Title]"
    flairs:
      - Unity
      - C#
    detailPageUrl: "/project.html?id=cat-survival-craft"
    imageSrc: "/assets/projects/cat-survival/cat-survival.png"
    imageCaption: "In-progress image"
    projectType: "PERSONAL PROJECT - NETWORKED GAMEPLAY"
    description: "An in-development multiplayer survival game built in Unity. This project is a deep dive into networking architecture, featuring a fully server-authoritative design for both player movement and the inventory system. Key implementations include client-side prediction and server reconciliation to ensure smooth gameplay even with network latency."
    links:
      github: "https://github.com/NoSlimes/CatSurvivalCraft_Portfolio"
      trello: ""

  - id: slaylien
    title: "SLAYLIEN"
    flairs:
      - Unreal Engine 5
      - Blueprints
      - C++
      - Group Project
      - FUTUREGAMES
    detailPageUrl: "/project.html?id=slaylien"
    imageSrc: "/assets/projects/slaylien/slaylien.png"
    imageCaption: "Slaylien"
    projectType: "GAME PROJECT 3 - FUTUREGAMES"
    description: "Slaylien is a third-person wave-defense game where players control a team of three characters to fend off hordes of insectoid aliens. Developed in Unreal Engine 5, it features a unique character switching mechanic where players can switch between characters in real-time to utilize their unique abilities.  designed and implemented the real-time character switching system, which allowed players to dynamically change tactics. I also developed the enemy AI using Behavior Trees, and core gameplay mechanics such as health and stats systems."
    links:
      github: ""
      demo: "https://download.noslimes.com/My%20Games/Futuregames/GP3/Team04_Slaylien.zip"

  - id: dead_sector
    title: "DEAD SECTOR"
    flairs:
      - Unity
      - C#
      - Group Project
      - FUTUREGAMES
    detailPageUrl: "/project.html?id=dead_sector"
    imageSrc: "/assets/projects/dead_sector/dead_sector.jpg"
    imageCaption: "Splash screen for Dead Sector"
    projectType: "GAME PROJECT 2 - FUTUREGAMES"
    description: "Dead Sector is a top-down sci-fi shooter where the player must find their way off their alien-infested space ship. The game is developed in Unity 6 during Game Project 2 at Futuregames. It features a unique weapon system that allows players to combine different weapon types to create powerful combinations. My main contributions in this project were in UI programming and the quest system implementation, as well as some gameplay programming."
    links:
      github: ""
      demo: ""

# Detailed Project Information
cat-survival-craft:
  pageTitle: Project - Cat Survival Craft
  heroImage: /assets/projects/cat-survival/cat-survival.png
  projectName: CAT SURVIVAL CRAFT [WORKING TITLE]
  projectType: "[PERSONAL PROJECT - NETWORKED GAMEPLAY]"
  flairs:
    - Unity
    - C#
    - Networking
  overview: |
    An in-development multiplayer survival game built in Unity. This project is a deep dive into networking architecture, featuring a fully server-authoritative design for both player movement and the inventory system to prevent cheating. The plan is to develop this into a full co-op survival game.
  projectInfo:
    Status: In Development
    Engine: Unity
    Language: C#
  contributions:
    - Implemented client-side prediction and server reconciliation for smooth gameplay.
    - Designed and developed the fully server-authoritative inventory system.
  detailedSections:
    - heading: Networking Philosophy
      body: |
        The primary goal is to build a secure, server-authoritative architecture. This means the server has the final say on all game state, preventing common cheats like flying or item duplication. All player inputs are sent to the server, which processes them and broadcasts the resulting state back to the clients. All item useage (for tools like pickaxes, axes, etc.) is ran solely on the server, and the clients only receive the results of the actions. The game is made using NGO (Netcode for GameObjects) and Unity Transport. 
  galleryImages:
    - /assets/projects/cat-survival/cat-survival.png
    - /assets/projects/cat-survival/cat-survival-00.gif
    - /assets/projects/cat-survival/cat-survival-inventory-00.png
    - /assets/projects/cat-survival/cat-survival-inventory-01.png
  videoURL: "/assets/projects/cat-survival/cat-survival.mp4"

slaylien:
  pageTitle: Project - SLAYLIEN
  heroImage: https://picsum.photos/id/30/1200/400
  projectName: SLAYLIEN
  projectType: "[GAME PROJECT 3 - FUTUREGAMES]"
  flairs:
    - Unreal Engine 5
    - Blueprints
    - C++
    - Group Project
  overview: |
    Slaylien is a third-person wave-defense game where players control a team of three characters to fend off hordes of insectoid aliens. Developed in Unreal Engine 5, it features a unique character switching mechanic where players can switch between characters in real-time to utilize their unique abilities.
  projectInfo:
    Team Size: 11
    Engine: Unreal Engine 5
    Language: C++ & Blueprints
    Key Features: Wave Defense, Character Switching
  contributions:
    - Designed and implemented the real-time character switching system.
    - Developed the enemy AI using Behavior Trees in Unreal Engine 5.
    - Programmed core gameplay mechanics such as the health and stats systems.
    - Developed the data-driven wave spawning system
  detailedSections:
    - heading: The Character Switching Mechanic
      body: |
        The core design pillar was creating a dynamic combat experience. Instead of being locked into one playstyle, players can instantly swap between a tank, a damage-dealer, and a ranged character. This was implemented in C++, leveraging the possession system of the character/controllers in Unreal—when one character is unpossessed, the next gets posessed.
    - heading: AI Development
      body: |
        The alien AI was developed using Unreal's Behavior Trees and Blackboards. This allowed us to quickly prototype behaviours and easily adjust their parameters for balancing. When implenting the AI, I decided to aplit the characters, Units, in the game into two categories; Units that are controllable by the player, and Units that are solely controlled by the AI. This allowed us to create a more complex AI system, where the AI could control the alien units, while the player could control their own characters. When the player switches from a character, an AI controller kicks in, and takes control over the character, continuing to fight the aliens.
    - heading: Wave Defense Mechanics
      body: |
        The game features a wave-based system where players must survive increasingly difficult waves of enemies. The wave spawning system was designed to be data-driven, allowing designers to easily adjust enemy types, spawn rates, and wave difficulty without needing to modify code. When the game starts the wave manager reads the wave configuration file and spanws the wave based on it.
  galleryImages:
    - https://picsum.photos/id/41/400/600
    - https://picsum.photos/id/42/600/400
    - https://picsum.photos/id/43/500/500
  videoURL: ""

dead_sector:
  pageTitle: Project - DEAD SECTOR
  heroImage: /assets/projects/dead_sector/dead_sector.jpg
  projectName: DEAD SECTOR
  projectType: "[GAME PROJECT 2 - FUTUREGAMES]"
  flairs:
    - Unity
    - C#
    - Group Project
  overview: |
    Dead Sector is a top-down sci-fi shooter where the player must find their way off their alien-infested space ship. Developed in Unity 6, the game features a unique weapon system that allows players to combine different weapon types to create powerful combinations.
  projectInfo:
    Team Size: 16
    Engine: Unity
    Language: C#
  contributions:
    - Led the UI programming, creating all menus and in-game HUD elements.
    - Designed and implemented the quest system to guide player progression.
    - Contributed to general gameplay programming and bug-fixing.
  detailedSections:
    - heading: Modular UI System
      body: |
        I built a scalable UI system using C# and Unity's UI Toolkit. It was designed to be easily managed by designers, with prefabs for common elements like buttons and health bars, ensuring a consistent look and feel across the entire game.
  galleryImages:
    - /assets/projects/dead_sector/dead_sector.jpg
    - https://picsum.photos/id/62/600/400
  videoURL: ""

slime-murderer:
  pageTitle: Project - Slime Murderer
  heroImage: /assets/projects/slime-murderer/slime-murderer-oob.gif
  projectName: SLIME MURDERER
  projectType: "[C# UNITY COURSE - FUTUREGAMES]"
  flairs:
    - Unity
    - C#
  overview: |
    During my first C# course at Futuregames, we were tasked with making a clone of the game "Vampire Survivors". The goal was to replicate the core gameplay loop of surviving endless waves of enemies with auto-attacking weapons and a robust power-up system.
  projectInfo:
    Team Size: 1
    Engine: Unity
    Language: C#
    Key Features: Endless | Abilities | Upgrades
  contributions:
    - Developed the entire game from scratch as a solo project.
    - Programmed the enemy spawning system and AI movement.
    - Created the weapon and player upgrade systems.
    - A custom status effect system
  detailedSections:
    - heading: Replicating the Core Loop
      body: |
        The biggest challenge was capturing the 'feel' of Vampire Survivors. This involved fine-tuning the player's movement speed, the timing of auto-attacking weapons, and the wave progression to create a satisfying difficulty curve that feels challenging but fair.
    - heading: Custom Status Effects
      body: |
        I implemented a custom status effect system that supports various effects like burning and poison. This system uses inheritance, allowing a specific status effect class to be selected in the inspector for abilities, where its settings can also be adjusted.
    - heading: Instructor Feedback
      body:
        - '"This project is overengineered compared to the expectations—thousands of lines of cohesively written, robust systems. I have nothing bad to say."'
        - '"You worked very autonomously and put in a lot of effort in so many areas. The game is fun to play, I never once ran into an obvious bug or issue, and all features are there with extra polish."'
        - '"Your coding skills are excellent. You''re at the stage where you can focus on overall system architecture and a specialization path—gameplay, tools, or engine development. I see you having no issue succeeding in any of them."'
  galleryImages:
    - /assets/projects/slime-murderer/slime-murderer-00.gif
    - /assets/projects/slime-murderer/slime-murderer-01.gif
  videoURL: ""

