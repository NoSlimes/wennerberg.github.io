cat-survival-craft:
  pageTitle: Project - Cat Survival Craft
  heroImage: 
  projectName: CAT SURVIVAL CRAFT [WORKING TITLE]
  projectType: "[PERSONAL PROJECT - NETWORKED GAMEPLAY]"
  flairs:
    - Unity
    - C#
    - Networking
  overview: |
    An in-development multiplayer survival game built in Unity. This project is a deep dive into networking architecture, featuring a fully server-authoritative design for both player movement and the inventory system to prevent cheating. The plan is to develop this into a full co-op survival game.
  projectInfo:
    Status: In Development
    Engine: Unity
    Language: C#
    Networking: Custom Server-Authoritative Model
  contributions:
    - Implemented client-side prediction and server reconciliation for smooth gameplay.
    - Designed and developed the fully server-authoritative inventory system.
  detailedSections:
    - heading: Networking Philosophy
      body: |
        The primary goal is to build a secure, server-authoritative architecture. This means the server has the final say on all game state, preventing common cheats like flying or item duplication. All player inputs are sent to the server, which processes them and broadcasts the resulting state back to the clients. All item useage (for tools like pickaxes, axes, etc.) is ran solely on the server, and the clients only receive the results of the actions. The game is made using NGO (Netcode for GameObjects) and Unity Transport. 
  galleryImages:
  videoURL: ""

slaylien:
  pageTitle: Project - SLAYLIEN
  heroImage: https://picsum.photos/id/30/1200/400
  projectName: SLAYLIEN
  projectType: "[GAME PROJECT 3 - FUTUREGAMES]"
  flairs:
    - Unreal Engine 5
    - Blueprints
    - C++
    - Group Project
  overview: |
    Slaylien is a third-person wave-defense game where players control a team of three characters to fend off hordes of insectoid aliens. Developed in Unreal Engine 5, it features a unique character switching mechanic where players can switch between characters in real-time to utilize their unique abilities.
  projectInfo:
    Team Size: 11
    Engine: Unreal Engine 5
    Language: C++ & Blueprints
    Key Features: Wave Defense, Character Switching
  contributions:
    - Designed and implemented the real-time character switching system.
    - Developed the enemy AI using Behavior Trees in Unreal Engine 5.
    - Programmed core gameplay mechanics such as the health and stats systems.
    - Developed the data-driven wave spawning system
  detailedSections:
    - heading: The Character Switching Mechanic
      body: |
        The core design pillar was creating a dynamic combat experience. Instead of being locked into one playstyle, players can instantly swap between a tank, a damage-dealer, and a ranged character. This was implemented in C++, leveraging the possession system of the character/controllers in Unreal—when one character is unpossessed, the next gets posessed.
    - heading: AI Development
      body: |
        The alien AI was developed using Unreal's Behavior Trees and Blackboards. This allowed us to quickly prototype behaviours and easily adjust their parameters for balancing. When implenting the AI, I decided to aplit the characters, Units, in the game into two categories; Units that are controllable by the player, and Units that are solely controlled by the AI. This allowed us to create a more complex AI system, where the AI could control the alien units, while the player could control their own characters. When the player switches from a character, an AI controller kicks in, and takes control over the character, continuing to fight the aliens.
    - heading: Wave Defense Mechanics
      body: |
        The game features a wave-based system where players must survive increasingly difficult waves of enemies. The wave spawning system was designed to be data-driven, allowing designers to easily adjust enemy types, spawn rates, and wave difficulty without needing to modify code. When the game starts the wave manager reads the wave configuration file and spanws the wave based on it.
  galleryImages:
    - https://picsum.photos/id/41/400/600
    - https://picsum.photos/id/42/600/400
    - https://picsum.photos/id/43/500/500
  videoURL: ""

dead_sector:
  pageTitle: Project - DEAD SECTOR
  heroImage: https://picsum.photos/id/50/1200/400
  projectName: DEAD SECTOR
  projectType: "[GAME PROJECT 2 - FUTUREGAMES]"
  flairs:
    - Unity
    - C#
    - Group Project
  overview: |
    Dead Sector is a top-down sci-fi shooter where the player must find their way off their alien-infested space ship. Developed in Unity 6, the game features a unique weapon system that allows players to combine different weapon types to create powerful combinations.
  projectInfo:
    Team Size: 16
    Engine: Unity
    Language: C#
  contributions:
    - Led the UI programming, creating all menus and in-game HUD elements.
    - Designed and implemented the quest system to guide player progression.
    - Contributed to general gameplay programming and bug-fixing.
  detailedSections:
    - heading: Modular UI System
      body: |
        I built a scalable UI system using C# and Unity's UI Toolkit. It was designed to be easily managed by designers, with prefabs for common elements like buttons and health bars, ensuring a consistent look and feel across the entire game.
  galleryImages:
    - https://picsum.photos/id/61/600/400
    - https://picsum.photos/id/62/600/400
  videoURL: ""

slime-murderer:
  pageTitle: Project - Slime Murderer
  heroImage: /assets/projects/slime-murderer/slime-murderer-oob.gif
  projectName: SLIME MURDERER
  projectType: "[C# UNITY COURSE - FUTUREGAMES]"
  flairs:
    - Unity
    - C#
  overview: |
    A clone of the popular game Vampire Survivors, created as the main project during my first C# course at Futuregames. The goal was to replicate the core gameplay loop of surviving endless waves of enemies with auto-attacking weapons and a robust power-up system.
  projectInfo:
    Team Size: 1
    Engine: Unity
    Language: C#
    Key Features: Endless | Abilities | Upgrades
  contributions:
    - Developed the entire game from scratch as a solo project.
    - Programmed the enemy spawning system and AI movement.
    - Created the weapon and player upgrade systems.
    - A custom status effect system
  detailedSections:
    - heading: Replicating the Core Loop
      body: |
        The biggest challenge was capturing the 'feel' of Vampire Survivors. This involved fine-tuning the player's movement speed, the timing of auto-attacking weapons, and the wave progression to create a satisfying difficulty curve that feels challenging but fair.
    - heading: Custom Status Effects
      body: |
        I implemented a custom status effect system that allows for various effects like slowing enemies, burning, and poison. This was done using a data-driven approach, where each status effect is defined in a scriptable object, making it easy to add new effects or modify existing ones without changing the core code.
  galleryImages:
    - /assets/projects/slime-murderer/slime-murderer-00.gif
    - /assets/projects/slime-murderer/slime-murderer-01.gif
  videoURL: ""
